# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
      sort_constructors_first: true
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

analyzer:
  exclude:
    - lib/**.graphql.dart # exclude generated files
    - lib/firebase_options.dart # exclude generated files
  plugins:
    - custom_lint

# DART CODE METRICS - The code metrics you don't want but need
# Documentation at https://dcm.dev/
# Below are the metrics listed that are currently being used
# The goal is to have them all enabled at some point
# To run the metrics:
# $ flutter pub run dart_code_metrics:metrics analyze lib
dart_code_metrics:
  extends:
    - package:dart_code_metrics_presets/all.yaml
  metrics:
    cyclomatic-complexity: 28
    halstead-volume: 7000
    lines-of-code: 250
    maintainability-index: 20
    maximum-nesting-level: 7
    number-of-methods: 15
    number-of-parameters: 4
    source-lines-of-code: 200
    technical-debt:
      threshold: 1000
      todo-cost: 50
      ignore-cost: 5
      ignore-for-file-cost: 20
      as-dynamic-cost: 100
      deprecated-annotations-cost: 50
      file-nullsafety-migration-cost: 200
      unit-type: "EUR"
  metrics-exclude:
    - test/** # we don't have any tests yet
    - lib/**.graphql.dart # exclude generated files
  rules:
    # ------ UNAVOIDABLE RULES -----------------
    - avoid-nested-conditional-expressions: false # we want to have conditions within the nesting of a widget
    - prefer-correct-identifier-length: # i used in for-loops
        exceptions: ["i"]
    - prefer-commenting-analyzer-ignores: false # we are too lazy to comment the ignore comments and it are too many
    - prefer-typedefs-for-callbacks: false
    - parameters-ordering: false
    - avoid-missing-image-alt: false # Users can all see properly
    - prefer-correct-handler-name:
        name-pattern: ^(handle[A-Z]|unawaited|setState)+ # Handler may be wrapped in unawaited if the handler is not awaited
    - prefer-define-hero-tag: false

        # ignore-functions: true
        # ignore-public: true

  rules-exclude:
    - test/** # exclude test files because we don't have any tests
    - lib/**.graphql.dart # exclude generated files

